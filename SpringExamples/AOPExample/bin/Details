AOP- Aspect Oriented Programming
When a method is executed, you can add extra functionality before/after the method execution

It increases modularity
example- logging, auditing,security-- not part of business logic
1	
Aspect

This is a module which has a set of APIs providing cross-cutting requirements. 
For example, a logging module would be called AOP aspect for logging.
 An application can have any number of aspects depending on the requirement.

2	
Join point

This represents a point in your application where you can plug-in the AOP aspect. 
You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework.

3	
Advice

This is the actual action to be taken either before or after the method execution. 
It is an action taken by an aspect at a particular joinpoint
This is an actual piece of code that is invoked during the program execution by Spring AOP framework.

4	
Pointcut

This is a set of one or more join points where an advice should be executed. 
You can specify pointcuts using expressions or patterns 

5	
Introduction

An introduction allows you to add new methods or attributes to the existing classes.

6	
Target object

The object being advised by one or more aspects. This object will always be a proxied object, also referred to as the advised object.

7	
Weaving

Weaving is the process of linking aspects with other application types or objects to create an advised object. 
This can be done at compile time, load time, or at runtime.



1	
before

Run advice before the a method execution.

2	
after

Run advice after the method execution, regardless of its outcome.

3	
after-returning

Run advice after the a method execution only if method completes successfully.

4	
after-throwing

Run advice after the a method execution only if method exits by throwing an exception.

5	
around

Run advice before and after the advised method is invoked.

